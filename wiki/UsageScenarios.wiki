#summary Examples of various RubyCAS-Server configurations
#labels Phase-Implementation,Phase-Deploy

= Introduction =

There are many ways to make use of the CAS architecture. Everything from using it as a basic, local authentication mechanism for a stand-alone web application, all the way to acting as an enterprise-level central authentication system for all HTTP-based services, as part of an Active Directory domain.

This page describes some of the more common usage scenarios, and explains how to implement  them using RubyCAS-Server. When discussing the client side of the CAS equation, we often refer to [http://code.google.com/p/rubycas-client/ RubyCAS-Client], however any full-featured CAS client can be used in its place (as should be true for the server as well).

---

=== Scenario A: Basics - Configuring a RubyCAS-Server and protecting multiple web apps ===

This is the canonical CAS usage example. Lets assume you have two web applications, a Rails app at http://myrails.example.com, and a PHP-based website at http://myphp.example.com. You want to fully protect both websites, so that accessing any of their pages requires the user to log in via CAS.

You will need:

  * *RubyCAS-Server*
  * A basic *SSL certificate* for your RubyCAS-Server
  * *[http://code.google.com/p/rubycas-client/ RubyCAS-Client]* to add CAS protection to your Rails app
  * *[http://www.ja-sig.org/wiki/display/CASC/phpCAS phpCAS]* to add CAS protection to your PHP app

Note that it is perfectly fine for all three pieces -- the CAS server and the two web apps -- to be served from the same machine.

==== Configuring RubyCAS-Server ====

First, download and install RubyCAS-Server, as described on the RubyCAS-Server project [http://code.google.com/p/rubycas-server/ home page].

Once installed, you should find that you can launch the server by typing `rubycas-server` on the command line (it is also possible to run the server as a daemon; this is also described on the home page). The first time you run `rubycas-server`, it should create a configuration file for you, probably under `/etc/rubycas-server/config.yml`, and quit. You will edit this file as described below and then launch `rubycas-server` again.

RubyCAS-Server's config.yml file is formatted using [http://www.yaml.org/ YAML], a simple, text-based format easily readable by both humans and machines. YAML formatting is mostly self-explanatory, but one thing to be careful about is indentation. Make sure that you use *spaces* instead of ~~tabs~~, as YAML is sensitive to this.

You can leave most of the settings in `config.yml` at their defaults, but a few things need to be changed:

  * *`ssl_cert:`* The `ssl_cert` value must point to your SSL certificate .pem file. You can use a self-signed certificate for testing, but you should obtain a real one from a Certificate Authority for production use. See the [SSLCertificates] wiki page for more info.
  * *`database:`* Further down, the `database` settings need to be configured for your database server. The options here are self-explanatory, but you may want to have a look at the [http://ar.rubyonrails.com/classes/ActiveRecord/Base.html#M000425 ActiveRecord documentation] for details.
  * *`authenticator:`* Finally, you'll have to configure the back-end `authenticator` against which RubyCAS-Server validates usernames and passwords. Keep in mind that the CAS server does not maintain its own list of users. Instead it uses some pre-existing data source. Several example `authenticator` configurations are included in the `config.yml` file. Pick the one best suited for your needs and uncomment it (by removing the `#` at the beginning of each line). Chances are, your web application already has a SQL table with usernames and passwords, so this may be the simplest choice (if so, uncomment and modify the "SQL Authentication" section in the default `config.yml`). Other possible methods include LDAP, !ActiveDirectory (via LDAP), or writing your own [WritingCustomAuthenticators custom authenticator].





