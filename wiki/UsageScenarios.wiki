#summary Examples of various RubyCAS-Server configurations
#labels Phase-Implementation,Phase-Deploy

= Introduction =

There are many ways to make use of the CAS architecture. Everything from using it as a basic, local authentication mechanism for a stand-alone web application, all the way to acting as an enterprise-level central authentication system for all HTTP-based services, as part of an Active Directory domain.

This page describes some of the more common usage scenarios, and explains how to implement  them using RubyCAS-Server. When discussing the client side of the CAS equation, we often refer to [http://code.google.com/p/rubycas-client/ RubyCAS-Client], however any full-featured CAS client can be used in its place (as should be true for the server as well).


=== Scenaria A: Protecting multiple web apps ===

This is the canonical CAS usage example. Lets assume you have two web applications, a Rails app at http://myrails.example.com, and a PHP-based website at http://myphp.example.com. You want to fully protect both websites, so that accessing any of their pages requires the user to log in via CAS.

You will need:

  * *RubyCAS-Server*
  * A basic *SSL certificate* for your RubyCAS-Server
  * *[http://code.google.com/p/rubycas-client/ RubyCAS-Client]* to add CAS protection to your Rails app
  * *[http://www.ja-sig.org/wiki/display/CASC/phpCAS phpCAS]* to add CAS protection to your PHP app

Note that it is perfectly fine for all three pieces -- the CAS server and the two web apps -- to be served from the same machine.

==== RubyCAS-Server Configuration ====

First, download and install RubyCAS-Server, as described on the RubyCAS-Server project [http://code.google.com/p/rubycas-server/ home page].

